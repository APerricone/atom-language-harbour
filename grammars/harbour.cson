'name': 'Harbour (prg)'
'scopeName': 'source.harbour'
'fileTypes': [
  'prg'
  'ch'
]
'repository': {
  'block_doc_comment': {
    'comment': 'Block documentation comment'
    'name': 'comment.block.documentation.harbour'
    'begin': '/\\*[!\\*][^\\*]'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'block_comment': {
    'comment': 'Block comment'
    'name': 'comment.block.harbour'
    'begin': '/\\*'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'line_doc_comment': {
    'comment': 'Single-line documentation comment'
    'name': 'comment.line.documentation.harbour'
    'match': '//[!/][^/].*$'
  }
  'line_comment': {
    'comment': 'Single-line comment'
    'name': 'comment.line.double-slash.harbour'
    'match': '//.*$'
  }
  
  'escaped_character': {
    'name': 'constant.character.escape.harbour'
    'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }
  'sigils': {
    'comment': 'Sigil'
    'name': 'keyword.operator.sigil.harbour'
    'match': '[&*](?=[a-zA-Z0-9_\\(\\[\\|\\"]+)'
  }

  'string_literal': {
      'comment': 'Double-quote string'
      'name': 'string.quoted.double.harbour'
      'begin': '"'
      'end': '"'
      'patterns': [
        { 'include': '#escaped_character' }
      ]
  }


  'std_types': {
    'comment': 'Standard library type'
    'name': 'support.class.std.harbour'
    'match': '\\b(Box|Vec|StrBuf|Path|Option|Result|Reader|Writer|Stream|Seek|Buffer|IoError|IoResult|Sender|SyncSender|Receiver|Cell|RefCell|Any)\\b'
  }
  'kinds': {
    'comment': 'Built-in trait (kind)'
    'name': 'support.type.kind.harbour'
    'match': '\\b(Send|Sized|Copy|Share|Drop|Freeze)\\b'
  }
  'self': {
    'comment': 'Self variable'
    'name': 'variable.language.harbour'
    'match': '\\b(SELF|self)\\b'
  }


  'lifetime': {
    'comment': 'Named lifetime'
    'name': 'storage.modifier.lifetime.harbour'
    'match': '\'([a-zA-Z_][a-zA-Z0-9_]*)\\b'
    'captures': {
      '1': { 'name': 'entity.name.lifetime.harbour' }
    }
  }
  'ref_lifetime': {
    'comment': 'Reference with named lifetime'
    'match': '&(\'([a-zA-Z_][a-zA-Z0-9_]*))\\b'
    'captures': {
      '1': { 'name': 'storage.modifier.lifetime.harbour' }
      '2': { 'name': 'entity.name.lifetime.harbour' }
    }
  }
  'type_params': {
    'comment': 'Type parameters'
    'name': 'meta.type_params.harbour'
    'begin': '<'
    'end': '>'
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#sigils' }
      { 'include': '#types' }
      { 'include': '#std_types' }
      { 'include': '#kinds' }
      { 'include': '#mut' }
      { 'include': '#lifetime' }
      { 'include': '#type_params' }
    ]
  }
}

'patterns': [
  # Comments
  { 'include': '#block_doc_comment' }
  { 'include': '#block_comment' }
  { 'include': '#line_doc_comment' }
  { 'include': '#line_comment' }
  # Attributes
  {
    'comment': 'Attribute'
    'name': 'meta.attribute.harbour'
    'begin': '#\\!?\\['
    'end': '\\]'
    'patterns': [
      { 'include': '#string_literal' }
    ]
  }
  # Strings
  {
    'comment': 'Single-quote string (character literal)'
    'name': 'string.quoted.single.harbour'
    'match': '\'([^\'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))\''
  }
  { 'include': '#string_literal' }
  # Numbers
  {
    'comment': 'Floating point number (fraction)'
    'name': 'constant.numeric.float.harbour'
    'match': '\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-][0-9_]+)?(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point number (exponent)'
    'name': 'constant.numeric.float.harbour'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-][0-9_]+(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point number (typed)'
    'name': 'constant.numeric.float.harbour'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-][0-9_]+)?(f32|f64)\\b'
  }
  {
    'comment': 'Integer number (decimal)'
    'name': 'constant.numeric.integer.decimal.harbour'
    'match': '\\b[0-9][0-9_]*([ui](8|16|32|64)?)?\\b'
  }
  {
    'comment': 'Integer number (hexadecimal)'
    'name': 'constant.numeric.integer.hexadecimal.harbour'
    'match': '\\b0x[a-fA-F0-9_]+([ui](8|16|32|64)?)?\\b'
  }
  {
    'comment': 'Integer number (octal)'
    'name': 'constant.numeric.integer.octal.harbour'
    'match': '\\b0o[0-7_]+([ui](8|16|32|64)?)?\\b'
  }
  {
    'comment': 'Integer number (binary)'
    'name': 'constant.numeric.integer.binary.harbour'
    'match': '\\b0b[01_]+([ui](8|16|32|64)?)?\\b'
  }
  # Language
  {
    'comment': 'Static storage modifier'
    'name': 'storage.modifier.static.harbour'
    'match': '\\b(static|STATIC)\\b'
  }
  {
    'comment': 'Boolean constant'
    'name': 'constant.language.boolean.harbour'
    'match': '\\b(\\.T\\.|\\.t\\.|\\.F\\.|\\.f\\.)\\b'
  }

  {
    'comment': 'Control keyword'
    'name': 'keyword.control.harbour'
    'match': '\\b(EXIT|ELSEIF|ELSE|IF|FOR|NEXT|LOOP|CASE|RETURN|WHILE|DO WHILE)\\b'
  }

  {
    'comment': 'Keyword'
    'name': 'keyword.other.harbour'
    'match': '\\b(LOCAL|PRIVATE|PUBLIC|FIELD|crate|extern|mod|let|proc|ref|use|super)\\b'
  }
  {
    'comment': 'Unsafe code keyword'
    'name': 'keyword.other.unsafe.harbour'
    'match': '\\bunsafe\\b'
  }
  # TODO: _
  { 'include': '#sigils' }
  { 'include': '#types' }
  { 'include': '#std_types' }
  { 'include': '#kinds' }
  { 'include': '#self' }
  { 'include': '#mut' }
  { 'include': '#box' }
  { 'include': '#lifetime' }
  { 'include': '#ref_lifetime' }
  # Operators
  {
    'comment': 'Operator'
    'name': 'keyword.operator.harbour'
    'match': '(\\+|-|/|\\*|!=|==|=|!|>|<|>=|<=|\\bas\\b)'
  }

  # Standard library
  {
    'comment': 'Standard library macro'
    'name': 'support.function.std.harbour'
    'match': '\\b(log_write|pp|to_str|TRIM|Trim|Padr|PADR)!'
  }
  {
    'comment': 'Standard library type variant'
    'name': 'support.constant.std.harbour'
    'match': '\\b(Some|None|Ok|Err)\\b'
  }

  {
    'comment': 'Function call'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('
    'captures': {
      '1': { 'name': 'entity.name.function.harbour' }
    }
  }
  # Function definition
  {
    'comment': 'Function definition'
    'begin': '\\b(FUNCTION|STATIC FUNCTION)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': '[\\n]'
    'beginCaptures': {
      '1': { 'name': 'keyword.other.fn.harbour' }
      '2': { 'name': 'entity.name.function.harbour' }
    }
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }


  # Variable declaration
  {
    'comment': 'Variable declaration'
    'begin': ':'
    'end': '[=;,\\)\\|]'
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }
]
